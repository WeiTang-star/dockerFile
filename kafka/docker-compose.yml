version: "3"
services:
  kafka1:
    image: wurstmeister/kafka:2.11-0.11.0.3
    #使用该参数，container内的root拥有真正的root权限。否则，container内的root只是外部的一个普通用户权限。privileged启动的容器，可以看到很多host上的设备，并且可以执行mount。甚至允许你在docker容器中启动docker容器。
    privileged: true 
    restart: always
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092 #内网访问
      KAFKA_ADVERTISED_HOST_NAME: 10.43.191.189   #外网访问 修改:宿主机IP
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.43.191.189:9092 #外网访问 修改:宿主机IP
      KAFKA_ADVERTISED_PORT: 9092 #外网访问 修改:宿主机映射port
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
    volumes:
      - ./kafka1/logs:/kafka
      - ./opt/kafka-server-start.sh:/opt/kafka/bin/kafka-server-start.sh
    external_links:
      - zoo1
      - zoo2
      - zoo3
    networks:
      default:
        ipv4_address: 172.23.0.31

  kafka2:
    image: wurstmeister/kafka:2.11-0.11.0.3
    privileged: true 
    restart: always
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9092"
    environment:
      #监听器会注册在 zookeeper 中；当我们对 172.17.0.10:9092 请求建立连接，kafka 服务器会通过 zookeeper 中注册的监听器，找到 INSIDE 监听器，然后通过 listeners 中找到对应的 通讯 ip 和 端口；
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_HOST_NAME: 10.43.191.189
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.43.191.189:9093
      KAFKA_ADVERTISED_PORT: 9093
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
    volumes:
      - ./kafka2/logs:/kafka
      - ./opt/kafka-server-start.sh:/opt/kafka/bin/kafka-server-start.sh
    external_links: # 连接本compose文件以外的container
      - zoo1
      - zoo2
      - zoo3
    networks:
      default:
        ipv4_address: 172.23.0.32

  kafka3:
    image: wurstmeister/kafka:2.11-0.11.0.3
    restart: always
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_HOST_NAME: 10.43.191.189
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://10.43.191.189:9094
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2181,zoo3:2181
    volumes:
      - ./kafka3/logs:/kafka
      - ./opt/kafka-server-start.sh:/opt/kafka/bin/kafka-server-start.sh
    external_links: # 连接本compose文件以外的container
      - zoo1
      - zoo2
      - zoo3
    networks:
      default:
        ipv4_address: 172.23.0.33

  kafka-manager:
    image: sheepkiller/kafka-manager:latest
    restart: always
    container_name: kafka-manager
    hostname: kafka-manager
    ports:
      - "9002:9000"
    links: # 连接本compose文件创建的container
      - kafka1
      - kafka2
      - kafka3
    external_links: # 连接本compose文件以外的container
      - zoo1
      - zoo2
      - zoo3
    environment:
      ZK_HOSTS: zoo1:2181,zoo2:2181,zoo3:2181
      KAFKA_BROKERS: kafka1:9092,kafka2:9092,kafka3:9092
      APPLICATION_SECRET: letmein
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    networks:
      default:
        ipv4_address: 172.23.0.30

networks:
  default:
    external: # 使用已创建的网络
      name: zookeeper_network
